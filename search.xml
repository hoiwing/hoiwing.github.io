<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里EasyExcel，更优雅地实现Excel导出</title>
    <url>/2019/12/27/%E9%98%BF%E9%87%8CEasyExcel%E8%A1%A8%E6%A0%BC%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h1 id="阿里EasyExcel，更优雅地实现Excel导出"><a href="#阿里EasyExcel，更优雅地实现Excel导出" class="headerlink" title="阿里EasyExcel，更优雅地实现Excel导出"></a>阿里EasyExcel，更优雅地实现Excel导出</h1><p>   在没有接触EasyExcel之前，我都是用Apache 开源框架 poi，技术很成熟但是那长长的代码实现，真的让人很懊恼。自从我知道阿里出品了一款Excel 文件导出工具，感觉试了一下。嗯，真香！  </p>
<h1 id="1-导入依赖："><a href="#1-导入依赖：" class="headerlink" title="1. 导入依赖："></a>1. 导入依赖：</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easyexcel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2-beta5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-使用注解方法"><a href="#2-使用注解方法" class="headerlink" title="2. 使用注解方法"></a>2. 使用注解方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestExcel</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        </span><br><span class="line">        OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/YX/Desktop/testAliExcel.xlsx"</span>); <span class="comment">//文件导出目录</span></span><br><span class="line">        ExcelWriter writer = EasyExcelFactory.getWriter(out);</span><br><span class="line">        写入仅有一个Sheet的Excel文件</span><br><span class="line">        Sheet sheet = <span class="keyword">new</span> Sheet(<span class="number">1</span>, <span class="number">0</span>, ExayExcelDTO.class);  <span class="comment">//(ExayExcelDTO)是写入 Excel 的数据模型对象</span></span><br><span class="line">        sheet.setSheetName(<span class="string">"aliExcel"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一个参数是要写入的模型数据集(我这里用的是List集合)</span></span><br><span class="line">        <span class="comment">//第二个参数是要写入的目标 sheet</span></span><br><span class="line">        writer.write(createModelList(), sheet);</span><br><span class="line">        <span class="comment">//将数据写入到文件中</span></span><br><span class="line">        writer.finish();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看到实现的代码就是这么少，那表头和每个单元格内的数据都没有循环实现呢，下面就是说怎么去实现这个表头和单元格内的数据</p>
<h2 id="2-1-Excel数据模型"><a href="#2-1-Excel数据模型" class="headerlink" title="2.1 Excel数据模型"></a>2.1 Excel数据模型</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExayExcelDTO</span> <span class="keyword">extends</span> <span class="title">BaseRowModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"登录名"</span>, index = <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">private</span> String loginName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelProperty</span>(value = <span class="string">"密码"</span>, index = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//get 和 set 方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>模型类一定要继承BaseRowModel</li>
<li>表头名称和下标位置则是用ExcelProperty中的value设置  </li>
</ul>
<h2 id="2-2-数据集合的方法"><a href="#2-2-数据集合的方法" class="headerlink" title="2.2 数据集合的方法"></a>2.2 数据集合的方法</h2><p>一般都是从数据库中获取，如果有Elasticsearch或数据量很大的需求，需要做分片查询再写入的处理否则可能会 OOM（Out of Memory）内存溢出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;ExayExcelDTO&gt; <span class="title">createModelList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;ExayExcelDTO&gt; writeModels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        ExayExcelDTO dto = <span class="keyword">new</span> ExayExcelDTO();</span><br><span class="line">        dto.setLoginName(<span class="string">"人造人"</span>+i+<span class="string">"号"</span>);</span><br><span class="line">        dto.setPassword(<span class="string">"1234560"</span>+i);</span><br><span class="line">        writeModels.add(dto);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> writeModels;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<img src="/images/note/EsayExcel.png" alt="EsayExcel" style="zoom:80%;">

<h1 id="3-动态生成表头"><a href="#3-动态生成表头" class="headerlink" title="3. 动态生成表头"></a>3. 动态生成表头</h1><p>上面的方法表头都是写死的，EsayExcel可以结合需求去动态生成表头，无需注解去生成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestExcel2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    OutputStream out = <span class="keyword">new</span> FileOutputStream(<span class="string">"/Users/YX/Desktop/testAliExcel2.xlsx"</span>);</span><br><span class="line">    ExcelWriter writer = EasyExcelFactory.getWriter(out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//动态添加表头， 适用一些表头动态变化场景</span></span><br><span class="line">    Sheet sheet = <span class="keyword">new</span> Sheet(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    sheet.setSheetName(<span class="string">"aliExcel"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个表格，用户 sheet 中使用</span></span><br><span class="line">    Table table = <span class="keyword">new</span> Table(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无注解动态添加表头</span></span><br><span class="line">    table.setHead(DemoServiceTest.addListHead());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这里是 write1 方法</span></span><br><span class="line">    writer.write1(createModelList2(), sheet, table);</span><br><span class="line"></span><br><span class="line">    writer.finish();</span><br><span class="line">    out.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-1-无注解动态添加表头"><a href="#3-1-无注解动态添加表头" class="headerlink" title="3.1 无注解动态添加表头"></a>3.1 无注解动态添加表头</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; addListHead() &#123;</span><br><span class="line">    <span class="comment">//模型没有注解,表头数据动态传入</span></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; head = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; headCoulumn1 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; headCoulumn2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; headCoulumn3 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; headCoulumn4 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    List&lt;String&gt; headCoulumn5 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//headCoulumn1 和 headCoulumn2 的表头名一致，自动合并表格表头下标的第一列和第二列</span></span><br><span class="line">  	<span class="comment">//headCoulumn1.add 三个表头名称，表头占是三行</span></span><br><span class="line">    headCoulumn1.add(<span class="string">"第一列"</span>);headCoulumn1.add(<span class="string">"第一列"</span>);headCoulumn1.add(<span class="string">"第一列"</span>);</span><br><span class="line">    headCoulumn2.add(<span class="string">"第一列"</span>);headCoulumn2.add(<span class="string">"第一列"</span>);headCoulumn2.add(<span class="string">"第一列"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//headCoulumn3 只占表头一列， 表头占是三行</span></span><br><span class="line">    headCoulumn3.add(<span class="string">"第二列"</span>);headCoulumn3.add(<span class="string">"第二列"</span>);headCoulumn3.add(<span class="string">"第二列"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//headCoulumn4 只占表头一列， 表头占是三行</span></span><br><span class="line">    headCoulumn4.add(<span class="string">"第三列1"</span>);headCoulumn4.add(<span class="string">"第三列2"</span>);headCoulumn4.add(<span class="string">"第三列2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//headCoulumn4 只占表头一列， 每行名称不一样，分三行显示</span></span><br><span class="line">    headCoulumn5.add(<span class="string">"第四列1"</span>);headCoulumn5.add(<span class="string">"第四列2"</span>);headCoulumn5.add(<span class="string">"第四列3"</span>);</span><br><span class="line"></span><br><span class="line">    head.add(headCoulumn1);</span><br><span class="line">    head.add(headCoulumn2);</span><br><span class="line">    head.add(headCoulumn3);</span><br><span class="line">    head.add(headCoulumn4);</span><br><span class="line">    head.add(headCoulumn5);</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以根据需求自由组合复杂表头</p>
<h2 id="3-2-无注解实体类"><a href="#3-2-无注解实体类" class="headerlink" title="3.2 无注解实体类"></a>3.2 无注解实体类</h2><p>这里我用的是Object数据类型，可以根据项目需求填写类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;List&lt;Object&gt;&gt; createModelList2() &#123;</span><br><span class="line">    <span class="comment">//所有行数据</span></span><br><span class="line">    List&lt;List&lt;Object&gt;&gt; rows = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        List&lt;Object&gt; row = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        row.add(<span class="string">"第一列数据"</span> + i);</span><br><span class="line">        row.add(<span class="string">"第二列数据"</span> + i);</span><br><span class="line">        row.add(<span class="string">"第三列数据"</span> + i);</span><br><span class="line">        row.add(<span class="string">"第四列数据"</span> + i);</span><br><span class="line">        row.add(<span class="string">"第五列数据"</span> + i);</span><br><span class="line">        rows.add(row);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图：</p>
<img src="/images/note/EasyExcel2.png" alt="EasyExcel2" style="zoom:80%;">



<p>具体怎么解决大量数据呢？</p>
<ul>
<li>分多个 Excel 文件写入</li>
<li>同一个 Excel 文件，分多个 Sheet 写入</li>
</ul>
<p>GitHub 源码地址：<br><a href="https://github.com/weiwosuoai/spring-boot-tutorial/tree/master/spring-boot-excel" target="_blank" rel="noopener">https://github.com/weiwosuoai/spring-boot-tutorial/tree/master/spring-boot-excel</a></p>
<p>Ref：<br><a href="https://github.com/alibaba/easyexcel" target="_blank" rel="noopener">https://github.com/alibaba/easyexcel</a></p>
]]></content>
      <categories>
        <category>EasyExcel</category>
      </categories>
      <tags>
        <tag>EasyExcel</tag>
        <tag>alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring date JPA 动态分页查询</title>
    <url>/2019/09/28/Spring%20date%20JPA%20%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="Spring-date-JPA-动态分页查询"><a href="#Spring-date-JPA-动态分页查询" class="headerlink" title="Spring date JPA 动态分页查询"></a>Spring date JPA 动态分页查询</h1><p>Spring date JPA 强大的语句让开发者不需要很熟悉sql都能简单上手，提高开发效率。  </p>
<h1 id="1-根绝页码和每页显示数量分页"><a href="#1-根绝页码和每页显示数量分页" class="headerlink" title="1.根绝页码和每页显示数量分页"></a>1.根绝页码和每页显示数量分页</h1><p>方法调用顺序：UserController –&gt; UserResource –&gt; UserService –&gt; UserRepository</p>
<p>为了更好的观看数据流向，和方法调用的顺序，我们就先从上面的顺序进行讲解，不过项目一般开发都是从后到前来写的，我们也要养成这样的开发习惯。  </p>
<p>实体类这里就不写了，你想要输出什么表的值，就输出什么表的实体类，无非就是get和set方法，不要忘了implement Serializable</p>
<h2 id="1-1-UserController"><a href="#1-1-UserController" class="headerlink" title="1.1 UserController"></a>1.1 UserController</h2><p>这里就不详细写Control，传参调用</p>
<h2 id="1-2-UserResource"><a href="#1-2-UserResource" class="headerlink" title="1.2 UserResource"></a>1.2 UserResource</h2><p>SpringBoot注解<span style="border-bottom:2px dashed yellow;">@Component</span>  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FindAllUser是返回给前端的实体类对象</span></span><br><span class="line"><span class="function">Public PageResp&lt;FindAllUser&gt; <span class="title">findAllUser</span><span class="params">(Integer pageNumber, Integer pageSize)</span> <span class="keyword">throws</span> ServerErrorException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pageNumber == <span class="keyword">null</span>)&#123;</span><br><span class="line">        pageNumber = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.DESC, <span class="string">"id"</span>);<span class="comment">//按id排序</span></span><br><span class="line">    <span class="comment">//默认第0页开始计算，所以传入当前页pageNumber参数为1，则是第0页。</span></span><br><span class="line">    Pageable pageble = PageRequest.of(pageNumber - <span class="number">1</span>, pageSize);<span class="comment">//当前页， 每页的记录数，  排序方式</span></span><br><span class="line">    PageResp&lt;FindAllUser&gt; resp = <span class="keyword">new</span> PageResp();</span><br><span class="line"></span><br><span class="line">    Page&lt;User&gt; pageResp = userRepository.findAll(pageble);<span class="comment">//在userRepository中默认使用父类的findAll方法</span></span><br><span class="line"></span><br><span class="line">    resp.setTotal(pageResp.getTotalElements());<span class="comment">//总记录</span></span><br><span class="line">    resp.setPage(pageResp.getPageable().getPageNumber());<span class="comment">//当前第几页</span></span><br><span class="line">    resp.setPageSize(pageResp.getPageable().getPageSize()); <span class="comment">//单页的记录个数</span></span><br><span class="line">    resp.setPageCount(pageResp.getTotalPages());<span class="comment">//数据记录的总数</span></span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = pageResp.getContent();<span class="comment">//用户集合</span></span><br><span class="line">    </span><br><span class="line">    FindAllUser[] findAllUsers = userService.UserListToArray(userList);<span class="comment">//调用Service的方法</span></span><br><span class="line">    resp.setPageData(findAllUsers);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><span style="border-bottom:2px dashed yellow;">Page</span>和 <span style="border-bottom:2px dashed yellow;">PageRequest</span> 和 <span style="border-bottom:2px dashed yellow;">Pageable</span>都在org.springframework.data.domain包下的  </p>
<h2 id="1-3-UserService"><a href="#1-3-UserService" class="headerlink" title="1.3 UserService"></a>1.3 UserService</h2><p>SpringBoot注解 <span style="border-bottom:2px dashed yellow;">@Service</span></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FindAllUser[] UserListToArray(List&lt;User&gt; userList) &#123;</span><br><span class="line">        List&lt;FindAllUser&gt; allUsers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user : userList)&#123;</span><br><span class="line">            <span class="comment">//用户名为ADMIN的用户则不显示即不显示超级用户的信息</span></span><br><span class="line">            <span class="keyword">if</span> (user.getLoginName().equals(Constants.ADMIN_LOGIN_NAME)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            FindAllUser allUser = <span class="keyword">new</span> FindAllUser();</span><br><span class="line">            allUser.setLoginName(user.getLoginName());</span><br><span class="line">            allUser.setId(user.getId());</span><br><span class="line">            allUser.setDesciption(user.getDescription());</span><br><span class="line">            allUsers.add(allUser);</span><br><span class="line">        &#125;</span><br><span class="line">        FindAllUser[] findAllUsers = allUsers.toArray(<span class="keyword">new</span> FindAllUser[allUsers.size()]);</span><br><span class="line">        <span class="keyword">return</span> findAllUsers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="1-4-返回值类PageResp-lt-T-gt"><a href="#1-4-返回值类PageResp-lt-T-gt" class="headerlink" title="1.4 返回值类PageResp&lt;T&gt;"></a>1.4 返回值类PageResp<strong>&lt;</strong>T<strong>&gt;</strong></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageResp</span>&lt;<span class="title">T</span>&gt; <span class="title">implement</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer pageCount;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer pageSize;</span><br><span class="line">    <span class="keyword">private</span> Long total;</span><br><span class="line">    <span class="keyword">private</span> T[] pageData;<span class="comment">//将要分页列表返回的数据放到泛型数组中存储。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//以及 get 和 set 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>T[] pageData：将要分页列表返回的数据放到泛型数组中存储。</p>
<h2 id="1-5-UserRepository数据库查询方法类"><a href="#1-5-UserRepository数据库查询方法类" class="headerlink" title="1.5 UserRepository数据库查询方法类"></a>1.5 UserRepository数据库查询方法类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;User&gt; <span class="title">findOneById</span><span class="params">(Long id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-根据条件查询分页"><a href="#2-根据条件查询分页" class="headerlink" title="2. 根据条件查询分页"></a>2. 根据条件查询分页</h1><p>这里共有两个方法实现动态条件查询分页</p>
<ul>
<li>Java1.8新特性Stream流</li>
<li>Jpa自带Specification</li>
</ul>
<h2 id="2-1-UserSource"><a href="#2-1-UserSource" class="headerlink" title="2.1 UserSource"></a>2.1 UserSource</h2><p>这是Java1.8新特性 <span style="border-bottom:2px dashed yellow;">Stream</span>的 <span style="border-bottom:2px dashed yellow;">filter</span> 方法进行条件查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PageResp&lt;FindAllUser&gt; <span class="title">getPageUser</span><span class="params">(Integer pageNumber, Integer pageSize,  FindDeviceReqDTO dto)</span> </span>&#123;</span><br><span class="line"><span class="comment">//FindDeviceReqDTO 是接收前端传参过来的实体类</span></span><br><span class="line">        Sort sort = Sort.by(Sort.Direction.DESC,<span class="string">"id"</span>); <span class="comment">//根据id进行降序，升序为AS</span></span><br><span class="line">        Pageable pageble = PageRequest.of(pageNumber - <span class="number">1</span>, pageSize, sort);<span class="comment">//当前页，每页的记录数,排序方式(Sort)</span></span><br><span class="line">        Page&lt;User&gt; pageResp = userRepository.findAll(pageable);</span><br><span class="line">        List&lt;User&gt; UserList = pageResp.get();</span><br><span class="line">        UserList.filter(user -&gt; &#123;</span><br><span class="line">            <span class="comment">//根据用户名去查询，当用户名相同时返回ture，否则返回false</span></span><br><span class="line">            <span class="keyword">if</span> (dto.getUserName() != <span class="keyword">null</span> &amp;&amp; !user.getUserName().equals(dto.getUserName())) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .collect(Collectors.toList());<span class="comment">//将符合条件的user进行集合成List</span></span><br><span class="line">        <span class="comment">//以下方法和2.1的一样。</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这是JPA自带的 <span style="border-bottom:2px dashed yellow;">Specification</span> 条件查询，个人觉得比较复杂麻烦，代码量多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Specification specification = <span class="keyword">new</span> Specification() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate <span class="title">toPredicate</span><span class="params">(Root root, CriteriaQuery criteriaQuery, CriteriaBuilder criteriaBuilder)</span> </span>&#123;</span><br><span class="line">        List&lt;Predicate&gt; predicates = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(upgradeViewSelector.getTaskName())) &#123;</span><br><span class="line">            predicates.add(criteriaBuilder</span><br><span class="line">                    .like(root.get(<span class="string">"userName"</span>), <span class="string">"%"</span> + dto.getUserName() + <span class="string">"%"</span>));<span class="comment">//在前后加上" % "模糊查询</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(upgradeViewSelector.getTboxId()))&#123;</span><br><span class="line">            predicates.add(criteriaBuilder</span><br><span class="line">                    .like(root.get(<span class="string">"sex"</span>), dto.getSex()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> criteriaBuilder.and(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">   Pageable pageble = PageRequest.of(pageNumber - <span class="number">1</span>, pageSize);<span class="comment">//当前页， 每页的记录数，  排序方式 </span></span><br><span class="line">   List&lt;User&gt; userList = UserRepository.findAll(specification,pageble);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Spring date JPA</category>
      </categories>
      <tags>
        <tag>Spring date JPA</tag>
        <tag>动态分页查询</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot + Apache POI</title>
    <url>/2019/09/24/SpringBoot+Excel%E5%8A%A8%E6%80%81%E5%AF%BC%E5%87%BA/</url>
    <content><![CDATA[<h1 id="SpringBoot-Apache-POI动态导出Excel"><a href="#SpringBoot-Apache-POI动态导出Excel" class="headerlink" title="SpringBoot + Apache POI动态导出Excel"></a>SpringBoot + Apache POI动态导出Excel</h1><p>每当我们的系统整理数据出来后，经常需要做成Excel表打印出来。<br>Java 的 POI 开放源码函式库就非常成熟，有三种制作Excel的API：</p>
<ul>
<li><p>POI-HSSF</p>
</li>
<li><p>POI-XSSF</p>
</li>
<li><p>SXSSF</p>
</li>
</ul>
<p>简单来说就是<span style="border-bottom:2px dashed yellow;">HSSF是生成xls格式（2003及以前的版本），XSSF是生成xlsx格式（ 2007及后期的版本），SXSSF是支持导出大批量的excel数据</span>。可以根据大家需求选择。</p>
<p>话不多说，看代码</p>
<h2 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-生成xls格式的表格"><a href="#2-生成xls格式的表格" class="headerlink" title="2.生成xls格式的表格"></a>2.生成xls格式的表格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.*;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.service.spi.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelExportUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(ExcelExportUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HSSFWorkbook <span class="title">exportExcel</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; data, String fileName, String savePath)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">        <span class="comment">// 从参数data中解析出打印的每列标题，放入title中</span></span><br><span class="line">        List&lt;String&gt; title = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry : data.get(<span class="number">0</span>).entrySet()) &#123;</span><br><span class="line">            title.add(entry.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 新建一个Excel文件</span></span><br><span class="line">        HSSFWorkbook wb = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line">        <span class="comment">// Excel中的sheet</span></span><br><span class="line">        HSSFSheet sheet = wb.createSheet();</span><br><span class="line">        <span class="comment">// sheet中的行，0表示第一行</span></span><br><span class="line">        HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">        sheet.setColumnWidth(<span class="number">0</span>, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">        row.setHeightInPoints(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">// 设置标题居中</span></span><br><span class="line">        HSSFCellStyle cellStyle = wb.createCellStyle();</span><br><span class="line">        cellStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sheet中的单元格</span></span><br><span class="line">        HSSFCell cell = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给第一行赋值，值为我们从参数中解析出的标题，因此需要我们在传参的时候需要严格按照约定</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.size(); i++) &#123;</span><br><span class="line">            cell = row.createCell(i);</span><br><span class="line">            cell.setCellValue(title.get(i));</span><br><span class="line">            cell.setCellStyle(cellStyle);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据参数内容数量，创建表格行数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">            row = sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">          </span><br><span class="line">            Map&lt;String, Object&gt; values = data.get(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将参数插入每一个单元格</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; title.size(); k++) &#123;</span><br><span class="line">                sheet.setColumnWidth(k , <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">                Object value = values.get(title.get(k));</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span> == value) &#123;</span><br><span class="line">                    value = <span class="string">""</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                String val = value.toString();</span><br><span class="line">                row.createCell(k).setCellValue(val);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将文件写到硬盘中，将来根据需求，或写到服务器中，因此在实际开发中，最好将"savePath"文件路径配置在.properties配置文件中，以便项目上线事更换方便</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(savePath + fileName) );</span><br><span class="line">            wb.write(fileOutputStream);</span><br><span class="line">            fileOutputStream.flush();</span><br><span class="line">            fileOutputStream.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServiceException(<span class="string">"文件导出失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> wb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="POI常用类"><a href="#POI常用类" class="headerlink" title="POI常用类:"></a>POI常用类:</h4><p>可以根据提供的常用类对Excel表格进行样式设置</p>
<ul>
<li><p>HSSFWorkbook：Excel的文档对象</p>
</li>
<li><p>HSSFSheet：Excel的表单</p>
</li>
<li><p>HSSFRow：Excel的行</p>
</li>
<li><p>HSSFCell：Excel的格子单元</p>
</li>
<li><p>HSSFFont：Excel字体</p>
</li>
<li><p>HSSFDataFormat：格子单元的日期格式</p>
</li>
<li><p>HSSFHeader：Excel文档Sheet的页眉 </p>
</li>
<li><p>HSSFFooter：Excel文档Sheet的页脚</p>
</li>
<li><p>HSSFCellStyle：格子单元样式</p>
</li>
<li><p>HSSFDateUtil：日期</p>
</li>
<li><p>HSSFPrintSetup：打印</p>
</li>
<li><p>HSSFErrorConstants：错误信息表</p>
</li>
</ul>
<h2 id="3-根据实体类动态生成表格"><a href="#3-根据实体类动态生成表格" class="headerlink" title="3.根据实体类动态生成表格"></a>3.根据实体类动态生成表格</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEXCEL</span><span class="params">(UserDTO userDTO, String setfileName, String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//UserDTO 是实体类</span></span><br><span class="line">    String messageDTO = JsonUtil.toString(userDTO);<span class="comment">//JsonUtil工具类把是实体类对象转化为String类型</span></span><br><span class="line">    Map&lt;String, Object&gt; updates = JsonUtil.toMap(messageDTO);<span class="comment">//转化为Map类型能生成Excel表格时会根据</span></span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; excelData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    data.add(updates);</span><br><span class="line">		<span class="comment">//自定义Excel的文件名，我这里以时间+自定义"setfileName"为文件名</span></span><br><span class="line">  	SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">    String fileName = setfileName + dateFormat.format(<span class="keyword">new</span> Date()) + <span class="string">".xls"</span>;</span><br><span class="line">    ExcelExportUtil.exportExcel(excelData, fileName, filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来我们将创建表格的格式HSSF为XSSF，只需要改几个地方。<span style="border-bottom:2px dashed yellow;">将HSSF改为XSSF即可</span> ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> XSSFWorkbook <span class="title">exportExcel</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; data, String fileName, String savePath)</span> <span class="keyword">throws</span> ServiceException </span>&#123;</span><br><span class="line">        <span class="comment">// 从参数data中解析出打印的每列标题，放入title中</span></span><br><span class="line">      List&lt;String&gt; title = Lists.newArrayList();</span><br><span class="line"></span><br><span class="line">    	<span class="keyword">for</span>(Map.Entry&lt;String, Object&gt; entry : data.get(<span class="number">0</span>).entrySet()) &#123;</span><br><span class="line">       	 title.add(entry.getKey());</span><br><span class="line">    	&#125;</span><br><span class="line">   	 <span class="comment">// 新建一个Excel文件</span></span><br><span class="line">  	  XSSFWorkbook wb = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">  	  <span class="comment">// Excel中的sheet</span></span><br><span class="line">  	  XSSFSheet sheet = wb.createSheet();</span><br><span class="line">  	  <span class="comment">// sheet中的行，0表示第一行</span></span><br><span class="line">  	  XSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">  	  sheet.setColumnWidth(<span class="number">0</span>, <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">  	  row.setHeightInPoints(<span class="number">30</span>);</span><br><span class="line">  	  <span class="comment">// 设置标题居中</span></span><br><span class="line">  	  XSSFCellStyle cellStyle = wb.createCellStyle();</span><br><span class="line">  	  cellStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER);</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// sheet中的单元格</span></span><br><span class="line">	    XSSFCell cell = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 给第一行赋值，值为我们从参数中解析出的标题，因此需要我们在传参的时候需要严格按照约定</span></span><br><span class="line">   	 <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; title.size(); i++) &#123;</span><br><span class="line">   	     cell = row.createCell(i);</span><br><span class="line">   	     cell.setCellValue(title.get(i));</span><br><span class="line">   	     cell.setCellStyle(cellStyle);</span><br><span class="line">  	  &#125;</span><br><span class="line"></span><br><span class="line">	    <span class="comment">// 根据参数内容数量，创建表格行数</span></span><br><span class="line">    	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.size(); i++) &#123;</span><br><span class="line">    	    row = sheet.createRow(i + <span class="number">1</span>);</span><br><span class="line">      	    Map&lt;String, Object&gt; values = data.get(i);</span><br><span class="line"></span><br><span class="line">				 <span class="comment">// 将参数插入每一个单元格</span></span><br><span class="line">   	     <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; title.size(); k++) &#123;</span><br><span class="line">   	         sheet.setColumnWidth(k , <span class="number">15</span> * <span class="number">256</span>);</span><br><span class="line">   	         Object value = values.get(title.get(k));</span><br><span class="line">   	         <span class="keyword">if</span>(<span class="keyword">null</span> == value) &#123;</span><br><span class="line">   	             value = <span class="string">""</span>;</span><br><span class="line">   	         &#125;</span><br><span class="line">   	         String val = value.toString();</span><br><span class="line">   	         row.createCell(k).setCellValue(val);</span><br><span class="line">	        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以根据实际情况使用XSSF还是HSSF</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Apache POI</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架整合</title>
    <url>/2019/07/18/SSM%E6%A1%86%E6%9E%B6%E7%9A%84%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>Spring + SpringMVC + Mybatis</p>
<h1 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h1><p>asm-3.3.1.jar<br>cglib-2.2.2.jar<br>com.springsource.com.mchange.v2.c3p0-0.9.1.2.jar<br>com.springsource.freemarker-2.3.15.jar<br>com.springsource.org.aopalliance-1.0.0.jar<br>com.springsource.org.apache.commons.fileupload-1.2.0.jar<br>com.springsource.org.apache.commons.io-1.4.0.jar<br>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br>commons-logging-1.1.1.jar<br>javassist-3.17.1-GA.jar<br>jstl-1.2.jar<br>log4j-1.2.17.jar<br>log4j-api-2.0-rc1.jar<br>log4j-core-2.0-rc1.jar<br>mybatis-3.2.7.jar<br>mybatis-spring-1.2.2.jar<br>mysql-connector-java-5.1.5-bin.jar<br>oscache-2.4.1.jar<br>slf4j-api-1.7.5.jar<br>slf4j-log4j12-1.7.5.jar<br>spring-aop-3.2.0.RC2.jar<br>spring-aspects-3.2.0.RC2.jar<br>spring-beans-3.2.0.RC2.jar<br>spring-context-3.2.0.RC2.jar<br>spring-context-support-3.2.0.RC2.jar<br>spring-core-3.2.0.RC2.jar<br>spring-expression-3.2.0.RC2.jar<br>spring-jdbc-3.2.0.RC2.jar<br>spring-orm-3.2.0.RC2.jar<br>spring-oxm-3.2.0.RC2.jar<br>spring-test-3.2.0.RC2.jar<br>spring-tx-3.2.0.RC2.jar<br>spring-web-3.2.0.RC2.jar<br>spring-webmvc-3.2.0.RC2.jar  </p>
<h2 id="2-创建一个springmvc文件"><a href="#2-创建一个springmvc文件" class="headerlink" title="2.创建一个springmvc文件"></a>2.创建一个springmvc文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">      http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.注解扫描位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.gyf.backoffice"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.配置映射处理和适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.视图的解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="3-在web-xml配置"><a href="#3-在web-xml配置" class="headerlink" title="3.在web.xml配置"></a>3.在web.xml配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 3.0的springmvc 默认加载WEB-INF下的dispatcher-servlet.xml文件 3.2的springmvc </span></span><br><span class="line"><span class="comment">			加载DispatcherServlet-servlet.xml文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="comment">&lt;!-- 修改黑底springmvc加载的配置文件路径 --&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="4-配置SqlMappingConfig-xml"><a href="#4-配置SqlMappingConfig-xml" class="headerlink" title="4.配置SqlMappingConfig.xml"></a>4.配置SqlMappingConfig.xml</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 别名配置 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 批量配置别名：指定批量定义别名的类包，别名为类名（首字母大小写都可） --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.gyf.backoffice.domain"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 批量加载映射文件 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.gyf.backoffice.mapper"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="5-创建spring的applicaiontContext-xml"><a href="#5-创建spring的applicaiontContext-xml" class="headerlink" title="5.创建spring的applicaiontContext.xml"></a>5.创建spring的applicaiontContext.xml</h1><p>配置数据源和mybaties的session工厂</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"30"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置sessionFactory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动生成dao,mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.gyf.backoffice.mapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactoryBean"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--自动扫描Service--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.gyf.backoffice"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/&gt;</span></span><br><span class="line"><span class="comment">        &lt;context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/&gt;</span></span><br><span class="line"><span class="comment">        &amp;lt;!&amp;ndash;排除&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 6.开启事务注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SSM</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>SSM</tag>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis的开始</title>
    <url>/2019/07/14/MyBatis/</url>
    <content><![CDATA[<h1 id="MyBatis的开始"><a href="#MyBatis的开始" class="headerlink" title="MyBatis的开始"></a>MyBatis的开始</h1><p>是一个优秀的持久层框架，它对jdbc的操作数据库的过程进行封装，使开发者只需要关注 SQL 本身，而不需要花费精力去处理例如注册驱动、创建connection、创建statement、手动设置参数、结果集检索等jdbc繁杂的过程代码。</p>
<h1 id="1-环境准备："><a href="#1-环境准备：" class="headerlink" title="1. 环境准备："></a>1. 环境准备：</h1><p>mybaits的代码由github.com管理，下载地址：<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a>  </p>
<ul>
<li>导入jar包：<br>asm-3.3.1.jar<br>cglib-2.2.2.jar<br>commons-logging-1.1.1.jar<br>javassist-3.17.1-GA.jar<br>log4j-1.2.17.jar<br>log4j-api-2.0-rc1.jar<br>log4j-core-2.0-rc1.jar<br>mybatis-3.2.7.jar<br>mysql-connector-java-5.1.7-bin.jar<br>slf4j-api-1.7.5.jar<br>slf4j-log4j12-1.7.5.jar  </li>
<li>添加日志包<br>在classpath下创建log4j.properties如下：==【文件内容可以从mybatis-3.2.7.pdf中拷贝】==</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Global logging configuration</span></span><br><span class="line"><span class="string">log4j.rootLogger=DEBUG,</span> <span class="string">stdout</span></span><br><span class="line"><span class="comment"># Console output...</span></span><br><span class="line"><span class="string">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="string">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="string">log4j.appender.stdout.layout.ConversionPattern=%5p</span> <span class="string">[%t]</span> <span class="bullet">-</span> <span class="string">%m%n</span></span><br></pre></td></tr></table></figure>

<p>日志级别在开发阶段设置成DEBUG，在生产阶段设置成INFO或者ERROR。</p>
<h1 id="2-开发步骤"><a href="#2-开发步骤" class="headerlink" title="2. 开发步骤"></a>2. 开发步骤</h1><ul>
<li>创建全局配置文件SqlMapConfig.xml；</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置mybatis的环境信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置JDBC事务控制，由mybatis进行管理 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 配置数据源，采用dbcp连接池 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--告诉mybatis加载映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种:写映射文件的名字--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="com/gyf/mapper/UserMapper.xml"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第二种:写类名,一定要有个映射文件与之对应</span></span><br><span class="line"><span class="comment">        如果没有，那么在UserMapper要声明注解--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="com.gyf.mapper.UserMapper"&gt;&lt;/mapper&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--第三种：可以写包名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"mybatis.mapper"</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>创建PO类：即与数据库中的表相映射的java对象</li>
<li>创建映射文件：在classpath下，创建sqlmap文件夹。在sqlmap目录下，创建User.xml映射文件。<br>==【Mybatis的映射文件头（可以从mybatis-3.2.7.pdf文件中拷贝）】==</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper    </span></span><br><span class="line"><span class="meta">PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"    </span></span><br><span class="line"><span class="meta">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	namespace：命名空间，它的作用就是对SQL进行分类化管理，可以理解为SQL隔离</span></span><br><span class="line"><span class="comment">	注意：使用mapper代理开发时，namespace有特殊且重要的作用</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">		[id]：statement的id，要求在命名空间内唯一  </span></span><br><span class="line"><span class="comment">		[parameterType]：入参的java类型</span></span><br><span class="line"><span class="comment">		[resultType]：查询出的单条结果集对应的java类型</span></span><br><span class="line"><span class="comment">		[#&#123;&#125;]： 表示一个占位符?</span></span><br><span class="line"><span class="comment">		[#&#123;id&#125;]：表示该占位符待接收参数的名称为id。注意：如果参数为简单类型时，#&#123;&#125;里面的参数名称可以是任意定义</span></span><br><span class="line"><span class="comment">	 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.mybatis.domain.User"</span>&gt;</span></span><br><span class="line">		SELECT * FROM USER WHERE id = #&#123;id&#125;</span><br><span class="line">	<span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-1-小结"><a href="#2-1-小结" class="headerlink" title="2.1 小结"></a>2.1 小结</h2><ul>
<li><p><strong>parameterType</strong>和<strong>resultType</strong><br>parameterType指定输入参数的java类型，可以填写别名或Java类的全限定名。<br>resultType指定输出结果的java类型，可以填写别名或Java类的全限定名。</p>
</li>
<li><p><strong>#{}和${}</strong>    </p>
<ul>
<li><p><strong>#{}</strong></p>
</li>
<li><ul>
<li>相当于预处理中的占位符 ？。  </li>
<li><strong>#</strong>{}里面的参数表示接收java输入参数的名称。  </li>
<li><strong>#</strong> {}可以接受HashMap、POJO类型的参数。</li>
<li>当接受简单类型的参数时，<strong>#</strong>{}里面可以是value，也可以是其他。</li>
<li><strong>#</strong> 可以防止SQL注入。  </li>
</ul>
</li>
<li><p><strong>$</strong> {}</p>
<ul>
<li>相当于拼接SQL串，对传入的值不做任何解释的原样输出。  </li>
<li><strong>$</strong> {}会引起SQL注入，所以要谨慎使用。</li>
<li><strong>$</strong> {}可以接受HashMap、POJO类型的参数。<br>当接受简单类型的参数时，<strong>$</strong> {}里面只能是value。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>selectOne和selectList</strong><br>selectOne：只能查询0或1条记录，大于1条记录的话，会报错：<br>selectList：可以查询0或N条记录</p>
</li>
</ul>
<h1 id="3-逆向工程："><a href="#3-逆向工程：" class="headerlink" title="3. 逆向工程："></a>3. 逆向工程：</h1><p>通过数据库中的单表，自动生成java代码。</p>
<ul>
<li><a href="https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2" target="_blank" rel="noopener">https://github.com/mybatis/generator/releases/tag/mybatis-generator-1.3.2</a></li>
<li>导入jar包：mybatis-generator-core-1.3.2.jar</li>
<li>创建配置文件<br>在classpath下，创建generator.xml配置文件：（文件内容可以从逆向工程的jar包中docs目录下的index.html中找到相关代码  </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"mysqlTable"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">  	<span class="comment">&lt;!-- 1.数据连接参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">password</span>=<span class="string">"123456"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">&lt;!-- 2.默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL </span></span><br><span class="line"><span class="comment">			和 NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 3.生成模型的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.mybatis.backoffice.domain"</span> <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 4.targetProject:mapper映射文件生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.mybatis.backoffice.mapper"</span>  <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 5. targetPackage：mapper接口生成的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"com.mybatis.backoffice.mapper"</span>  </span></span><br><span class="line"><span class="tag">   		 <span class="attr">targetProject</span>=<span class="string">".\src"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 6.要生成的表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"items"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orderdetail"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"orders"</span>/&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"user"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用java类来执行逆向工程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generator</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">		<span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">		File configFile = <span class="keyword">new</span> File(<span class="string">"config/generator.xml"</span>);</span><br><span class="line">		ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">		Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">		DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">		MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config,</span><br><span class="line">				callback, warnings);</span><br><span class="line">		myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>mybatis逆向工程运行成功却没有生成相应的包和文件<br>解决办法<br>原因：逆向工程中的路径问题，windows和mac等的文件系统路径不同<br>mac和Linux下应该使用./，windows下应该使用.\</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Oscache缓存机制</title>
    <url>/2019/07/05/SSM%E7%9A%84Oscache%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h2><p>ocache-x.x.x.jar<br>commons-logging.jar</p>
<h2 id="在index-jsp中测试"><a href="#在index-jsp中测试" class="headerlink" title="在index.jsp中测试 :"></a>在index.jsp中测试 :</h2><p>需要添加</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://www.opensymphony.com/oscache"</span> prefix=<span class="string">"o"</span>%&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">现在的时间：&lt;%=<span class="keyword">new</span> Date()%&gt;&lt;br&gt;</span><br><span class="line">&lt;ocache&gt;</span><br><span class="line">缓存的时间：&lt;%=<span class="keyword">new</span> Date()%&gt;</span><br><span class="line">&lt;/ocache&gt;</span><br><span class="line"> &lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p>得出两个时间是不同的  </p>
<h2 id="缓存的作用域"><a href="#缓存的作用域" class="headerlink" title="缓存的作用域"></a>缓存的作用域</h2><p>缓存默认存储在application域当中，可更改缓存数据。  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;ocache scope=<span class="string">"session"</span>&gt;</span><br><span class="line">缓存的时间：&lt;%=<span class="keyword">new</span> Date()%&gt;</span><br><span class="line">&lt;/ocache&gt;</span><br></pre></td></tr></table></figure>

<p>这样，不同浏览器访问时，缓存时间是不一样的，如果是application,不同浏览器访问同一个路径时，时间是一样的  </p>
<h4 id="也可以设置缓存更新："><a href="#也可以设置缓存更新：" class="headerlink" title="也可以设置缓存更新："></a>也可以设置缓存更新：</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;ocache time=<span class="string">"4"</span>&gt;</span><br><span class="line">&lt;!-- 每<span class="number">4</span>秒更新一次缓存--&gt;</span><br><span class="line">缓存的时间：&lt;%=<span class="keyword">new</span> Date()%&gt;</span><br><span class="line">&lt;/ocache&gt;</span><br></pre></td></tr></table></figure>

<h3 id="缓存持久化"><a href="#缓存持久化" class="headerlink" title="缓存持久化"></a>缓存持久化</h3><p>创建oscache.properties这个配置文件必须在classpath下面：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">cache.memory</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">cache.persistence.class</span>=<span class="string">com.opensymphony.oscache.plugins.diskpersistence.DiskPersistenceListener</span></span><br><span class="line"><span class="meta">cache.path</span>=<span class="string">C:\\test</span></span><br></pre></td></tr></table></figure>

<p>访问路径后会在test的application中创建缓存文件</p>
<h2 id="Oscache整合ssm项目"><a href="#Oscache整合ssm项目" class="headerlink" title="Oscache整合ssm项目"></a>Oscache整合ssm项目</h2><p>在web.xml中配置页面缓存：  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置页面缓存 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>oscache<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>	<span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.opensymphony.oscache.web.filter.CacheFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>time<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>3600<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-name</span>&gt;</span>scope<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">param-value</span>&gt;</span>application<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>oscache<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/items/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Oscache</category>
      </categories>
      <tags>
        <tag>Oscache</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring的AOP</title>
    <url>/2019/07/05/Spring%E7%9A%84AOP.md/</url>
    <content><![CDATA[<h1 id="1-AOP概述"><a href="#1-AOP概述" class="headerlink" title="1.AOP概述"></a>1.AOP概述</h1><ul>
<li>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。  </li>
<li>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率</li>
</ul>
<h1 id="2-AOP术语"><a href="#2-AOP术语" class="headerlink" title="2.AOP术语"></a>2.AOP术语</h1><ul>
<li>target：目标类，需要被代理的类。例如：UserService</li>
<li>Joinpoint(连接点):所谓连接点是指那些可能被拦截到的方法。例如：所有的方法</li>
<li>PointCut 切入点：已经被增强的连接点。例如：addUser()</li>
<li>advice 通知/增强，增强代码。例如：after、before</li>
<li>Weaving(织入):是指把增强advice应用到目标对象target来创建新的代理对象proxy的过程.</li>
<li>proxy 代理类</li>
<li>Aspect(切面): 是切入点pointcut和通知advice的结合<br> 一个线是一个特殊的面。<br> 一个切入点和一个通知，组成成一个特殊的面。  </li>
</ul>
<h1 id="3-AOP的配置"><a href="#3-AOP的配置" class="headerlink" title="3.AOP的配置"></a>3.AOP的配置</h1><ol>
<li><p>导入jar包：<br>pring-framework-3.0.2.RELEASE-dependencies\org.aspectj\com.springsource.org.aspectj.weaver\1.6.8.RELEASE</p>
</li>
<li><p>Spring 的AOP配置<br>以下为全自动编程方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--xmlns xml namespace:xml命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span> =<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span> =<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span> =<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置UserService--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.spring.service.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置切面对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myAspect3"</span> <span class="attr">class</span>=<span class="string">"com.spring.aspect.MyAspect3"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 aop --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:指定切面--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"myAspect3"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义一个切入点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"myPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.spring.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 配置前置通知...--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:before method="myBefore" pointcut-ref="myPointcut" /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--&lt;aop:after-returning method="myAfterReturning" pointcut-ref="myPointcut"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置环绕通知--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">"myAround"</span> <span class="attr">pointcut-ref</span>=<span class="string">"myPointcut"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.aopalliance.intercept.MethodInvocation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切面类：增加代码 与 切入点 结合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation mi)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//拦截方法</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"开启事务..."</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        Object retObj = mi.proceed();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"拦截....."</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"提交事务..."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String xmlPath = <span class="string">"com/spring/beans.xml"</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(xmlPath);</span><br><span class="line">        UserService service = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        service.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="4-基本AOP的事务配置"><a href="#4-基本AOP的事务配置" class="headerlink" title="4.基本AOP的事务配置"></a>4.基本AOP的事务配置</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 使用spring的aop标签配置--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.配置通知事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"transfer"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">isolation</span>=<span class="string">"DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.事务与切入点关联 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut</span>=<span class="string">"execution(* gyf.service..*.*(..))"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试同上</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringAOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring的实例化</title>
    <url>/2019/07/03/Spring%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8C%96/</url>
    <content><![CDATA[<h1 id="1-使用构造方法实例化"><a href="#1-使用构造方法实例化" class="headerlink" title="1. 使用构造方法实例化"></a>1. 使用构造方法实例化</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--装配bean的三种方式，所谓的装配bean就是在xml写一个bean标签--&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 第一种方式: new 实现类--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService1"</span> <span class="attr">class</span>=<span class="string">"com.gyf.service.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-使用静态工厂方法实例化"><a href="#2-使用静态工厂方法实例化" class="headerlink" title="2. 使用静态工厂方法实例化"></a>2. 使用静态工厂方法实例化</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第二种方式：通过静态工厂方法</span></span><br><span class="line"><span class="comment">    spring的版本过低，3.0版本,把jdk改成1.7</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService2"</span> <span class="attr">class</span>=<span class="string">"com.gyf.service.UserSereviceFactory1"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="2-使用静态工厂方法实例化-1"><a href="#2-使用静态工厂方法实例化-1" class="headerlink" title="2. 使用静态工厂方法实例化"></a>2. 使用静态工厂方法实例化</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--第三种方式：通过实例工厂方法 --&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 创建实例factory2 bean--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"factory2"</span> <span class="attr">class</span>=<span class="string">"com.gyf.service.UserSereviceFactory2"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService3"</span> <span class="attr">factory-bean</span>=<span class="string">"factory2"</span> <span class="attr">factory-method</span>=<span class="string">"createUserService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans3.xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//new 对象</span></span><br><span class="line">    <span class="comment">//IUserService userService1 = (IUserService) context.getBean("userService1");</span></span><br><span class="line">    <span class="comment">//userService1.add();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态工厂</span></span><br><span class="line">    <span class="comment">//IUserService userService2 = UserSereviceFactory1.createUserService();</span></span><br><span class="line">    <span class="comment">//IUserService userService2 = (IUserService) context.getBean("userService2");</span></span><br><span class="line">    <span class="comment">//userService2.add();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例工厂</span></span><br><span class="line">    <span class="comment">//1.创建工厂</span></span><br><span class="line">   <span class="comment">// UserSereviceFactory2 factory2 = new UserSereviceFactory2();</span></span><br><span class="line">    <span class="comment">//IUserService userService3 = factory2.createUserService();</span></span><br><span class="line"></span><br><span class="line">    IUserService userService3 = (IUserService) context.getBean(<span class="string">"userService3"</span>);</span><br><span class="line">    userService3.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>记录第一次使用SpringMVC</title>
    <url>/2019/07/02/SpringMVC.md/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><ul>
<li><p>Spring MVC是Spring提供的一个强大而灵活的web框架。借助于注解，Spring MVC提供了几乎是POJO的开发模式，使得控制器的开发和测试更加简单。这些控制器一般不直接处理请求，而是将其委托给Spring上下文中的其他bean，通过Spring的依赖注入功能，这些bean被注入到控制器中。</p>
</li>
<li><p>Spring MVC主要由DispatcherServlet、处理器映射【找控制器】、适配器【调用控制器的方法】、控制器【业务】、视图解析器、视图组成。</p>
</li>
</ul>
<h1 id="2-SpringMVC的配置"><a href="#2-SpringMVC的配置" class="headerlink" title="2.SpringMVC的配置"></a>2.SpringMVC的配置</h1><ol>
<li>导入jar包：<br>com.springsource.org.aopalliance-1.0.0.jar<br>com.springsource.org.apache.commons.logging-1.1.1.jar<br>com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar<br>log4j-1.2.16.jar<br>spring-aop-3.2.0.RC2.jar<br>spring-aspects-3.2.0.RC2.jar<br>spring-beans-3.2.0.RC2.jar<br>spring-context-3.2.0.RC2.jar<br>spring-core-3.2.0.RC2.jar<br>spring-expression-3.2.0.RC2.jar<br>spring-jdbc-3.2.0.RC2.jar<br>spring-orm-3.2.0.RC2-sources.jar<br>spring-test-3.2.0.RC2.jar<br>spring-tx-3.2.0.RC2.jar<br>spring-web-3.2.0.RC2.jar<br>spring-webmvc-3.2.0.RC2.jar  </li>
<li>在web.xml配置DispatcherServlet  </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在WEB-INF目录下创建DispatcherServlet-servlet.xml</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/mvc </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/context/spring-context-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 1. 配置处理器映射，springmvc默认的处理器映射器</span></span><br><span class="line"><span class="comment">			 BeanNameUrlHandlerMapping:根据bean的name属性的url去找handlerController --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 2. 配置处理器适配置器执行Controller --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 3.配置一个控制器 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/user.do"</span> <span class="attr">class</span>=<span class="string">"com.springmvc.backoffice.web.controller.UserController"</span>/&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 4.配置springmvc视图解析器</span></span><br><span class="line"><span class="comment">			视图解析器解析的视频路径为：前缀 + 后缀 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views"</span>/&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建个Controller控制器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ModelAndView mav = <span class="keyword">new</span> ModelAndView(<span class="string">"user/userlist"</span>);</span><br><span class="line"></span><br><span class="line">        mav.addObject(<span class="string">"name"</span>,<span class="string">"springmvc"</span>);</span><br><span class="line">        <span class="keyword">return</span> mav;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringMVC的拦截器"><a href="#SpringMVC的拦截器" class="headerlink" title="SpringMVC的拦截器"></a>SpringMVC的拦截器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line">	<span class="comment">//controller执行后且视图返回后调用此方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, Exception arg3)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"返回视图前  后处理"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//controller执行后但未返回视图前调用此方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest arg0, HttpServletResponse arg1, Object arg2, ModelAndView arg3)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"未返回视图前 后处理...."</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// controller执行前调用此方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object obj)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"预处理...."</span>);</span><br><span class="line">		<span class="comment">//在此设置拦截的条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DispatcherServlet-servlet-xml添加登录拦截器配置："><a href="#DispatcherServlet-servlet-xml添加登录拦截器配置：" class="headerlink" title="DispatcherServlet-servlet.xml添加登录拦截器配置："></a>DispatcherServlet-servlet.xml添加登录拦截器配置：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录拦截器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加拦截器的路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.springmvc.backoffice.web.interceptor.LoginInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Spring</title>
    <url>/2019/06/28/Spring/</url>
    <content><![CDATA[<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益<br>简单来说，Spring是一个轻量级的控制反转（IoC）和面向切面（AOP）的容器框架。</p>
<h2 id="1-导入核心包"><a href="#1-导入核心包" class="headerlink" title="1. 导入核心包"></a>1. 导入核心包</h2><p>spring-framework-4.2.0.RELEASE中的：<br>spring-core-3.2.2.RELEASE.jar<br>spring-beans-3.2.2.RELEASE.jar<br>spring-context-3.2.2.RELEASE.jar<br>spring-expression-3.2.2.RELEASE.jar<br>com.springsource.org.apache.commons.logging-1.1.1.jar</p>
<h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h2><p>beans.xml，配置文件的约束可以访问：<br>spring-framework-3.2.0.RC2-docs/reference/html/xsd-config.html网页查看  </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"gyf.service.UserServiceImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>从beans.xml获取bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testSpring</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</span><br><span class="line">        UserService service = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">        service.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结：【IoC】"><a href="#总结：【IoC】" class="headerlink" title="总结：【IoC】"></a>总结：【IoC】</h2><p>IoC Inverse of Control 反转控制的概念，就是将原本在程序中手动创建UserService对象的控制权，交由Spring框架管理，简单说，就是创建UserService对象控制权被反转到了Spring框架</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
